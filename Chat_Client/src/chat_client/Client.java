/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat_client;
import java.net.*;
import java.io.*;
import java.util.*;
/**
 *
 * @author mrred
 */
public class Client extends javax.swing.JFrame {
    String username, address = "192.168.100.93";
    ArrayList<String> users = new ArrayList();
    int port = 2222;
    Boolean isConnected = false;
    
    Socket sock;
    BufferedReader reader;
    PrintWriter writer;
    
public void ListenThread(){
    Thread IncomingReader = new Thread(new IncomingReader());
    IncomingReader.start();
}
public void userAdd(String data){
    users.add(data);
}
public void userRemove(String data){
    msg_area.append(data + "Is now Offline. \n");
}
public void writeUsers(){
    String[] tempList = new String[(users.size())];
    users.toArray(tempList);
    for (String token:tempList)
    {
        //users.append(token + "\n");
    }
}
public void sendDisconnect()
{
    String bye = (username + ": :Disconnect");
    try
    {
        writer.println(bye);
        writer.flush();
    }catch (Exception e)
    {
        msg_area.append("Could not send Disconnect message.\n");
    }
}
public void Disconnect(){
    try{
        msg_area.append("Disconnect. \n");
        sock.close();
    }catch(Exception ex)
    {
        msg_area.append("Failed to disconnect. \n");
    }
    isConnected = false;
    cb_username.setEditable(true);
}
    
    public Client() {
        initComponents();
    }
    
    public class IncomingReader implements Runnable{
        @Override
        public void run()
        {
            String[] data;
            String stream, done = "Done", connect = "Connect", disconnect = "Disconnect", chat = "Chat";
            try{
                while ((stream = reader.readLine()) !=null)
                {
                    data = stream.split(":");
                    if (data[2].equals(chat)){
                        msg_area.append(data[0] + ": " + data[1] + "\n");
                        msg_area.setCaretPosition(msg_area.getDocument().getLength());
                    }
                    else if(data[2].equals(connect))
                    {
                        msg_area.removeAll();
                        userAdd(data[0]);
                    }
                    else if (data[2].equals(disconnect))
                    {
                        userRemove(data[0]);
                    }
                    else if (data[2].equals(done))
                    {
                        writeUsers();
                        users.clear();
                    }
                }
            }catch(Exception ex){ }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        msg_area = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cb_address = new javax.swing.JTextField();
        cb_username = new javax.swing.JTextField();
        cb_password = new javax.swing.JTextField();
        cb_port = new javax.swing.JTextField();
        cb_login = new javax.swing.JButton();
        cb_disconnect = new javax.swing.JButton();
        cb_connect = new javax.swing.JButton();
        cb_set = new javax.swing.JTextField();
        cb_send = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        msg_area.setColumns(20);
        msg_area.setRows(5);
        jScrollPane1.setViewportView(msg_area);

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel1.setText("IP Address");

        jLabel2.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel2.setText("Username");

        jLabel3.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel3.setText("Password");

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 1, 12)); // NOI18N
        jLabel4.setText("Port");

        cb_port.setText("2222");

        cb_login.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        cb_login.setText("Login");
        cb_login.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_loginActionPerformed(evt);
            }
        });

        cb_disconnect.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        cb_disconnect.setText("Disconnect");
        cb_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_disconnectActionPerformed(evt);
            }
        });

        cb_connect.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        cb_connect.setText("Connect");
        cb_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_connectActionPerformed(evt);
            }
        });

        cb_set.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_setActionPerformed(evt);
            }
        });

        cb_send.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        cb_send.setText("Send");
        cb_send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_sendActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(cb_set)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_address)
                            .addComponent(cb_username)
                            .addComponent(cb_password)
                            .addComponent(cb_port)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cb_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(cb_disconnect, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE))
                    .addComponent(cb_login, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cb_send, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_address, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_username, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_password, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(cb_port, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(cb_login, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cb_connect)
                            .addComponent(cb_disconnect)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb_set, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_send, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cb_loginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_loginActionPerformed
        // TODO add your handling code here:
        cb_username.setText("");
        if(isConnected == false)
        {
            String Redho="Redho";
            Random generator = new Random();
            int i = generator.nextInt(999) + 1;
            String is=String.valueOf(i);
            Redho=Redho.concat(is);
            username=Redho;
            
            cb_username.setText(Redho);
            cb_username.setEditable(false);
            
            try
            {
                sock = new Socket (address, port);
                InputStreamReader streamreader = new InputStreamReader(sock.getInputStream());
                reader = new BufferedReader(streamreader);
                writer = new PrintWriter(sock.getOutputStream());
                writer.println(Redho + ":has connected.:Connect");
                writer.flush();
                isConnected = true;
            }catch (Exception ex)
            {
                msg_area.append("Cannot Connect! Try Again \n");
                cb_username.setEditable(true);
            }
            
            ListenThread();
        } else if (isConnected == true)
        {
            msg_area.append("You are alredy connected. \n");
        }
    }//GEN-LAST:event_cb_loginActionPerformed

    private void cb_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_connectActionPerformed
        // TODO add your handling code here:
        if(isConnected == false)
        {
            username = cb_username.getText();
            cb_username.setEditable(false);
            
            try
            {
                sock = new Socket(address, port);
                InputStreamReader streamreader = new InputStreamReader(sock.getInputStream());
                reader = new BufferedReader(streamreader);
                writer = new PrintWriter(sock.getOutputStream());
                writer.println(username + ":has connected.:Connect");
                writer.flush();
                isConnected = true;
            }catch (Exception ex)
            {
                msg_area.append("Cannot Connect! Try Again. \n");
                cb_username.setEditable(true);
            }
            
            ListenThread();
        }else if (isConnected == true)
        {
            msg_area.append("You are already connected. \n");
        }
    }//GEN-LAST:event_cb_connectActionPerformed

    private void cb_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_disconnectActionPerformed
        // TODO add your handling code here:
         sendDisconnect();
         Disconnect();
    }//GEN-LAST:event_cb_disconnectActionPerformed

    private void cb_setActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_setActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_cb_setActionPerformed

    private void cb_sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_sendActionPerformed
        // TODO add your handling code here:
        String nothing ="";
        if((cb_set.getText()).equals(nothing)){
            cb_set.setText("");
            cb_set.requestFocus();
        }else{
            try{
                writer.println(username + ":" + cb_set.getText() + ":" + "Chat");
                writer.flush();
            }catch (Exception ex) {
                msg_area.append("Message was not set. \n");
            }
            cb_set.setText("");
            cb_set.requestFocus();
        }
        cb_set.setText("");
        cb_set.requestFocus();
    }//GEN-LAST:event_cb_sendActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Client().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField cb_address;
    private javax.swing.JButton cb_connect;
    private javax.swing.JButton cb_disconnect;
    private javax.swing.JButton cb_login;
    private javax.swing.JTextField cb_password;
    private javax.swing.JTextField cb_port;
    private javax.swing.JButton cb_send;
    private javax.swing.JTextField cb_set;
    private javax.swing.JTextField cb_username;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea msg_area;
    // End of variables declaration//GEN-END:variables
}
